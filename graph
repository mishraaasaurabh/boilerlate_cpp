#include <bits/stdc++.h>
using namespace std;
const long long int mod = 1e9+7;
#define int long long

//adjacency list representation.

void addedge(vector<int>adj[],int u,int v){
    adj[u].push_back(v);
    adj[v].push_back(u);
}

void printgraph(vector<int>adj[],int v){
    for(int i=0;i<v;i++){
        for(auto it:adj[i])
        cout<<it<<" ";
        cout<<"\n";
    }
}

void bfs(vector<int>adj[],int v,int s,bool visited[]){

    queue<int>q;
    q.push(s);
    visited[s]=true; //visited are marked as true

    while(!q.empty()){
        int u=q.front();
        q.pop();
        cout<<u<<" ";

        for(auto it:adj[u]){
            if(!visited[it]){
                visited[it]=true;
                q.push(it);
            }
        }
    }

}

void bfsdist(vector<int>adj[],int v){

    bool visited[v+1];
    for(int i=0;i<v+1;i++)visited[i]=false;

    for(int i=0;i<v;i++){
        if(!visited[i])
        bfs(adj,v,i,visited);
    }

}

int total_components(vector<int>adj[],int v){
    int cnt=0;


    bool visited[v+1];
    for(int i=0;i<v+1;i++)visited[i]=false;

    for(int i=0;i<v;i++){
        if(!visited[i]){
        bfs(adj,v,i,visited);
        cnt++;
        }
    }
    return cnt;

}

void dfsrec(vector<int>adj[],int s,bool visited[]){
    
    visited[s]=true;
    cout<<s<<" ";
    for(auto it:adj[s]){
        if(visited[it]==false)
        dfsrec(adj,it,visited);
    }
}
void dfs(vector<int>adj[],int v,int s){
    bool visited[v];
    for(int i=0;i<v;i++)visited[i]=false;
    
    for(int i=0;i<v;i++){
        if(visited[i]==false)
        dfsrec(adj,i,visited);
    }
    
}

signed main(){
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);



    return 0;
    
}
